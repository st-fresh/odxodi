{"version":3,"sources":["../src/Canvas.js"],"names":["default","Bus","actions","messageListeners","popActions","action","pushMessage","listener","pop","message","getNextMessage","Promise","push","resolve","Canvas","width","height","loaded","bus","context2D","getContext","contextType","contextAttributes","queue","onMessage","postMessage","webview","JSON","stringify","then","type","payload","atob","handleMessage","parse","e","nativeEvent","data","handleRef","element","handleLoad","style","props","overflow","flex","backgroundColor","require","propTypes","shape"],"mappings":"shCAKQA,O,KALR,4B,2CACA,qC,mDACA,yCACA,iDACA,oE,q9BAGMC,I,8DACJC,O,CAAU,E,MACVC,gB,CAAmB,E,MAEnBC,U,CAAa,UAAM,CACjB,kBAAqB,MAAKF,OAA1B,4NAAmC,uIAAxBG,OAAwB,MACjCA,SACD,CACD,MAAKH,OAAL,CAAe,EAAf,CACD,C,MAEDI,W,CAAc,iBAAW,CACvB,GAAMC,UAAW,MAAKJ,gBAAL,CAAsBK,GAAtB,EAAjB,CACAD,SAASE,OAAT,EACD,C,MAEDC,c,CAAiB,iBACf,IAAIC,QAAJ,CAAY,iBAAW,CACrB,MAAKR,gBAAL,CAAsBS,IAAtB,CAA2BC,OAA3B,EACD,CAFD,CADe,E,MASEC,O,OAHpB,kCAAc,QAAd,C,OACA,sCAAkB,CAACC,MAAO,GAAR,CAAaC,OAAQ,GAArB,CAAlB,C,OACA,mCAAe,CAAC,WAAD,CAAf,C,wcAMCC,M,CAAS,K,QACTC,G,CAAM,GAAIjB,IAAJ,E,QACNkB,S,CAAY,8C,QAEZC,U,CAAa,SAACC,WAAD,CAAcC,iBAAd,CAAoC,CAC/C,OAAQD,WAAR,EACE,IAAK,IAAL,CAAW,CACT,MAAO,QAAKF,SAAZ,CACD,CAHH,CAKA,MAAO,KAAP,CACD,C,QAEDI,K,CAAQ,gBAAU,CAChB,GAAI,OAAKN,MAAT,CAAiB,CACfZ,SACD,CACD,OAAKa,GAAL,CAAShB,OAAT,CAAiBU,IAAjB,CAAsBP,MAAtB,EACD,C,QAEDmB,S,CAAY,uBAAiB,CAAE,C,QAE/BC,W,CAAc,iBAAW,CACvB,OAAKF,KAAL,CAAW,iBAAM,QAAKG,OAAL,CAAaD,WAAb,CAAyBE,KAAKC,SAAL,CAAenB,OAAf,CAAzB,CAAN,EAAX,EACA,MAAO,QAAKS,GAAL,CAASR,cAAT,GAA0BmB,IAA1B,CAA+B,eAAqB,IAAnBC,KAAmB,OAAnBA,IAAmB,CAAbC,OAAa,OAAbA,OAAa,CACzD,OAAQD,IAAR,EACE,IAAK,MAAL,CAAa,CACX,MAAOC,QAAP,CACD,CACD,IAAK,MAAL,CAAa,CACX,MAAOC,MAAKD,OAAL,CAAP,CACD,CANH,CAQD,CATM,CAAP,CAUD,C,QAEDE,a,CAAgB,WAAK,CACnB,OAAKf,GAAL,CAASZ,WAAT,CAAqBqB,KAAKO,KAAL,CAAWC,EAAEC,WAAF,CAAcC,IAAzB,CAArB,EACD,C,QAEDC,S,CAAY,iBAAW,CACrB,OAAKZ,OAAL,CAAea,OAAf,CACD,C,QAEDC,U,CAAa,UAAM,CACjB,OAAKvB,MAAL,CAAc,IAAd,CACA,OAAKC,GAAL,CAASd,UAAT,GACD,C,2GAEQ,IACAW,MADA,CACiB,IADjB,CACAA,KADA,CACOC,MADP,CACiB,IADjB,CACOA,MADP,IAEAyB,MAFA,CAES,KAAKC,KAFd,CAEAD,KAFA,CAGP,MACE,kDAAM,gBAAQ1B,WAAR,CAAeC,aAAf,CAAuB2B,SAAU,QAAjC,CAA2CC,KAAM,CAAjD,EAAuDH,KAAvD,CAAN,iDACE,oDACE,IAAK,KAAKH,SADZ,CAEE,MAAO,CAACvB,WAAD,CAAQC,aAAR,CAAgB6B,gBAAiB,aAAjC,CAFT,CAGE,OAAQC,QAAQ,cAAR,CAHV,CAIE,UAAW,KAAKb,aAJlB,CAKE,OAAQ,KAAKO,UALf,iDADF,CADF,CAWD,C,8CAnEMO,S,CAAY,CACjBN,MAAO,oBAAUO,KAAV,iCADU,C,wDADAlC,M","file":"Canvas.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {View, WebView, ViewStylePropTypes} from 'react-native';\nimport {webviewTarget, webviewProperties, webviewMethods} from './webview-binders';\nimport CanvasRenderingContext2D from './CanvasRenderingContext2D';\nexport {default as Image} from './Image';\n\nclass Bus {\n  actions = [];\n  messageListeners = [];\n\n  popActions = () => {\n    for (const action of this.actions) {\n      action();\n    }\n    this.actions = [];\n  };\n\n  pushMessage = message => {\n    const listener = this.messageListeners.pop();\n    listener(message);\n  };\n\n  getNextMessage = () =>\n    new Promise(resolve => {\n      this.messageListeners.push(resolve);\n    });\n}\n\n@webviewTarget('canvas')\n@webviewProperties({width: 300, height: 150})\n@webviewMethods(['toDataURL'])\nexport default class Canvas extends Component {\n  static propTypes = {\n    style: PropTypes.shape(ViewStylePropTypes),\n  };\n\n  loaded = false;\n  bus = new Bus();\n  context2D = new CanvasRenderingContext2D(this);\n\n  getContext = (contextType, contextAttributes) => {\n    switch (contextType) {\n      case '2d': {\n        return this.context2D;\n      }\n    }\n    return null;\n  };\n\n  queue = action => {\n    if (this.loaded) {\n      action();\n    }\n    this.bus.actions.push(action);\n  };\n\n  onMessage = handleMessage => {};\n\n  postMessage = message => {\n    this.queue(() => this.webview.postMessage(JSON.stringify(message)));\n    return this.bus.getNextMessage().then(({type, payload}) => {\n      switch (type) {\n        case 'json': {\n          return payload;\n        }\n        case 'blob': {\n          return atob(payload);\n        }\n      }\n    });\n  };\n\n  handleMessage = e => {\n    this.bus.pushMessage(JSON.parse(e.nativeEvent.data));\n  };\n\n  handleRef = element => {\n    this.webview = element;\n  };\n\n  handleLoad = () => {\n    this.loaded = true;\n    this.bus.popActions();\n  };\n\n  render() {\n    const {width, height} = this;\n    const {style} = this.props;\n    return (\n      <View style={{width, height, overflow: 'hidden', flex: 0, ...style}}>\n        <WebView\n          ref={this.handleRef}\n          style={{width, height, backgroundColor: 'transparent'}}\n          source={require('./index.html')}\n          onMessage={this.handleMessage}\n          onLoad={this.handleLoad}\n        />\n      </View>\n    );\n  }\n}\n"]}